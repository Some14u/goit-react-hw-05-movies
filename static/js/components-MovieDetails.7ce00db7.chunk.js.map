{"version":3,"file":"static/js/components-MovieDetails.7ce00db7.chunk.js","mappings":"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","sources":["components/MovieDetails/MovieDetails.jsx","components/MovieDetails/MovieDetails.styled.js","components/MovieDetails/index.js","helpers/theMovieDbApi.js"],"sourcesContent":["import { importUrlAssociated } from \"helpers/urlApi\";\nimport { theMovieDbApi } from \"helpers/theMovieDbApi\";\nimport { Wrapper, Title, Details, Poster, Link, BackLink } from \"./MovieDetails.styled\";\nimport PropTypes from \"prop-types\";\n\nimport PageNotFound from \"views/PageNotFound\";\nconst Cast = importUrlAssociated(\"cast\", \"components/Cast\");\nconst Reviews = importUrlAssociated(\"reviews\", \"components/Reviews\");\n\n\nexport default function MovieDetails(props) {\n  const data = theMovieDbApi.lazyGet(\"movie/\" + props.urlParams.movieId);\n  if (data === null || data.success === false) return <PageNotFound />; // No data after responce\n  return (\n    <>\n      <BackLink path=\"<<<\" fallback=\"/movies\">Go back</BackLink>\n      <Wrapper>\n        <Poster src={theMovieDbApi.imgUrl + theMovieDbApi.posterPath + data.poster_path} alt={`${data.title} poster`} />\n        <div>\n          <Details>\n            <Title>{data.title}{extractYear(data.release_date)}</Title>\n            <p>User score: {data.vote_average * 10}%</p>\n            <h3>Overview</h3>\n            <p>{data.overview}</p>\n            <b>Genres</b>\n            <p>{data.genres.map(item => item.name).join(\", \")}</p>\n            <hr />\n          <b>Additional information</b>\n          <ul>\n            <li>\n              <Link path=\"cast\" historyAction=\"replace\">Cast</Link>\n            </li>\n            <li>\n              <Link path=\"reviews\" historyAction=\"replace\">Reviews</Link>\n            </li>\n          </ul>\n          </Details>\n        </div>\n      </Wrapper>\n      <hr />\n      <Cast />\n      <Reviews />\n    </>\n  );\n};\n\n\nMovieDetails.propTypes = {\n  urlParams: PropTypes.shape({\n    movieId: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\n\nfunction extractYear(date) {\n  if (!date || date === \"\") return \"\";\n  return \" (\" + ((new Date(date))?.getUTCFullYear() || date) + \")\"\n}","import { ControllerLink } from \"helpers/urlApi\";\nimport styled from \"styled-components\";\n\nexport const Wrapper = styled.article`\n  display: flex;\n  padding-top: 20px;\n`;\n\nexport const Title = styled.h1`\n  margin-top: 0;\n`;\n\nexport const Details = styled.div`\n  padding-left: 20px;\n  max-width: 500px;\n`;\n\nexport const Poster = styled.img`\n  display: block;\n  width: 240px;\n  height: 100%;\n`;\n\nexport const Link = styled(ControllerLink)`\n  &.matchUrl {\n    color: red;\n  }\n`;\n\nexport const BackLink = styled(ControllerLink)`\n  display: block;\n  width: fit-content;\n  transform: translateY(10px);\n`;","import MovieDetails from \"./MovieDetails\";\n\nexport default MovieDetails;","class TheMovieDbApi {\n  url = \"https://api.themoviedb.org/3/\";\n  cache = {};\n  configuration = { // Default values just in case\n    images: {\n      base_url: \"http://image.tmdb.org/t/p/\",\n      secure_base_url: \"https://image.tmdb.org/t/p/\",\n      backdrop_sizes: [\n        \"w300\",\n        \"w780\",\n        \"w1280\",\n        \"original\"\n      ],\n      logo_sizes: [\n        \"w45\",\n        \"w92\",\n        \"w154\",\n        \"w185\",\n        \"w300\",\n        \"w500\",\n        \"original\"\n      ],\n      poster_sizes: [\n        \"w92\",\n        \"w154\",\n        \"w185\",\n        \"w342\",\n        \"w500\",\n        \"w780\",\n        \"original\"\n      ],\n      profile_sizes: [\n        \"w45\",\n        \"w185\",\n        \"h632\",\n        \"original\"\n      ],\n      still_sizes: [\n        \"w92\",\n        \"w185\",\n        \"w300\",\n        \"original\"\n      ],\n    },\n  };\n  imgUrl;\n  posterPath;\n  portraitPath;\n  DESIRED_POSTER_SIZE = { width: 240, height: 356 };\n  DESIRED_PORTRAIT_SIZE = { width: 100, height: 150 };\n  parameters = {};\n\n  constructor() {\n    this.loadConfiguration();\n  }\n\n  // Searches the closest possible tag name that comform with the given width and height\n  findBestTag(list, { width = 0, height = 0 }) {\n    if (width + height === 0) return \"original\";\n\n    let closest = { w: 0, h: 0 };\n\n    list.filter(item => item.startsWith(\"w\"))\n      .map(item => Number.parseInt(item.substring(1))).sort((a, b) => b - a)\n      .forEach(item => {\n        if (closest.w === 0 || (item > width && Math.abs(width - item) < Math.abs(width - closest.w))) closest.w = item;\n      });\n\n    list.filter(item => item.startsWith(\"h\")).sort((a, b) => b - a)\n      .map(item => Number.parseInt(item.substring(1)))\n      .forEach(item => {\n        if (closest.h === 0 || (item > height && Math.abs(height - item) < Math.abs(height - closest.h))) closest.h = item;\n      });\n    return Math.abs(height - closest.h) < Math.abs(width - closest.w) ? \"h\" + closest.h : \"w\" + closest.w;\n  }\n\n  loadConfiguration() {\n    this.get(\"configuration\")\n      .then(data => {\n        this.configuration = { ...this.configuration, ...data }\n      })\n      .finally(() => {\n        this.buildImageUrls();\n      });\n  }\n\n  buildImageUrls() {\n    this.imgUrl = this.configuration.images.secure_base_url;\n    this.posterPath = this.findBestTag(this.configuration.images.poster_sizes, this.DESIRED_POSTER_SIZE) + \"/\";\n    this.portraitPath = this.findBestTag(this.configuration.images.profile_sizes, this.DESIRED_PORTRAIT_SIZE) + \"/\";\n  }\n\n  buildRequestString(path, parameters = {}) {\n    const params = \"?\" + new URLSearchParams({ ...this.parameters, ...parameters, api_key: process.env.REACT_APP_SEARCH_KEY });\n    return this.url + path + params;\n  }\n\n  createFetchPromise(request) {\n    return new Promise(async (resolve) => {\n      const response = await window.fetch(request);\n      const data = await response.json();\n      resolve(data);\n    });\n  }\n\n\n  get(path, parameters = {}, isLazy) {\n    const request = this.buildRequestString(path, parameters);\n    if (!this.cache[request]) {\n      const resource = this.createFetchPromise(request);\n      this.cache[request] = isLazy ? new AsyncResource(resource) : resource;\n    }\n    return isLazy ? this.cache[request].read() : this.cache[request];\n  }\n\n  lazyGet(path, parameters) {\n    return this.get(path, parameters, true);\n  }\n\n}\n\n\nexport const theMovieDbApi = new TheMovieDbApi();\n\n\n\nclass AsyncResource {\n  status = \"pending\";\n  error = undefined;\n  data = undefined;\n  promise = null;\n\n  constructor(promise) {\n    this.promise = promise\n      .then((data) => {\n        this.status = \"success\";\n        this.data = data;\n      })\n      .catch((error) => {\n        this.status = \"error\";\n        this.error = error;\n      })\n  }\n\n  read() {\n    switch (this.status) {\n      case \"pending\":\n        throw this.promise;\n      case \"error\":\n        throw this.error;\n      default:\n        return this.data;\n    }\n  }\n}\n"],"names":["Cast","importUrlAssociated","Reviews","MovieDetails","props","data","theMovieDbApi","urlParams","movieId","success","BackLink","path","fallback","Wrapper","Poster","src","poster_path","alt","title","Details","Title","extractYear","release_date","vote_average","overview","genres","map","item","name","join","Link","historyAction","date","Date","getUTCFullYear","styled","ControllerLink","TheMovieDbApi","url","cache","configuration","images","base_url","secure_base_url","backdrop_sizes","logo_sizes","poster_sizes","profile_sizes","still_sizes","DESIRED_POSTER_SIZE","width","height","DESIRED_PORTRAIT_SIZE","parameters","this","loadConfiguration","list","closest","w","h","filter","startsWith","Number","parseInt","substring","sort","a","b","forEach","Math","abs","get","then","finally","buildImageUrls","imgUrl","posterPath","findBestTag","portraitPath","params","URLSearchParams","api_key","process","request","Promise","resolve","window","fetch","response","json","isLazy","buildRequestString","resource","createFetchPromise","AsyncResource","read","promise","status","error","undefined","catch"],"sourceRoot":""}