{"version":3,"file":"static/js/views-Home.accf66a5.chunk.js","mappings":"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","sources":["helpers/theMovieDbApi.js","views/Home.jsx"],"sourcesContent":["class TheMovieDbApi {\n  url = \"https://api.themoviedb.org/3/\";\n  cache = {};\n  configuration = { // Default values just in case\n    images: {\n      base_url: \"http://image.tmdb.org/t/p/\",\n      secure_base_url: \"https://image.tmdb.org/t/p/\",\n      backdrop_sizes: [\n        \"w300\",\n        \"w780\",\n        \"w1280\",\n        \"original\"\n      ],\n      logo_sizes: [\n        \"w45\",\n        \"w92\",\n        \"w154\",\n        \"w185\",\n        \"w300\",\n        \"w500\",\n        \"original\"\n      ],\n      poster_sizes: [\n        \"w92\",\n        \"w154\",\n        \"w185\",\n        \"w342\",\n        \"w500\",\n        \"w780\",\n        \"original\"\n      ],\n      profile_sizes: [\n        \"w45\",\n        \"w185\",\n        \"h632\",\n        \"original\"\n      ],\n      still_sizes: [\n        \"w92\",\n        \"w185\",\n        \"w300\",\n        \"original\"\n      ],\n    },\n  };\n  imgUrl;\n  posterPath;\n  portraitPath;\n  DESIRED_POSTER_SIZE = { width: 240, height: 356 };\n  DESIRED_PORTRAIT_SIZE = { width: 100, height: 150 };\n  parameters = {};\n\n  constructor() {\n    this.loadConfiguration();\n  }\n\n  // Searches the closest possible tag name that comform with the given width and height\n  findBestTag(list, { width = 0, height = 0 }) {\n    if (width + height === 0) return \"original\";\n\n    let closest = { w: 0, h: 0 };\n\n    list.filter(item => item.startsWith(\"w\"))\n      .map(item => Number.parseInt(item.substring(1))).sort((a, b) => b - a)\n      .forEach(item => {\n        if (closest.w === 0 || (item > width && Math.abs(width - item) < Math.abs(width - closest.w))) closest.w = item;\n      });\n\n    list.filter(item => item.startsWith(\"h\")).sort((a, b) => b - a)\n      .map(item => Number.parseInt(item.substring(1)))\n      .forEach(item => {\n        if (closest.h === 0 || (item > height && Math.abs(height - item) < Math.abs(height - closest.h))) closest.h = item;\n      });\n    return Math.abs(height - closest.h) < Math.abs(width - closest.w) ? \"h\" + closest.h : \"w\" + closest.w;\n  }\n\n  loadConfiguration() {\n    this.get(\"configuration\")\n      .then(data => {\n        this.configuration = { ...this.configuration, ...data }\n      })\n      .finally(() => {\n        this.buildImageUrls();\n      });\n  }\n\n  buildImageUrls() {\n    this.imgUrl = this.configuration.images.secure_base_url;\n    this.posterPath = this.findBestTag(this.configuration.images.poster_sizes, this.DESIRED_POSTER_SIZE) + \"/\";\n    this.portraitPath = this.findBestTag(this.configuration.images.profile_sizes, this.DESIRED_PORTRAIT_SIZE) + \"/\";\n  }\n\n  buildRequestString(path, parameters = {}) {\n    const params = \"?\" + new URLSearchParams({ ...this.parameters, ...parameters, api_key: process.env.REACT_APP_SEARCH_KEY });\n    return this.url + path + params;\n  }\n\n  createFetchPromise(request) {\n    return new Promise(async (resolve) => {\n      const response = await window.fetch(request);\n      const data = await response.json();\n      resolve(data);\n    });\n  }\n\n\n  get(path, parameters = {}, isLazy) {\n    const request = this.buildRequestString(path, parameters);\n    if (!this.cache[request]) {\n      const resource = this.createFetchPromise(request);\n      this.cache[request] = isLazy ? new AsyncResource(resource) : resource;\n    }\n    return isLazy ? this.cache[request].read() : this.cache[request];\n  }\n\n  lazyGet(path, parameters) {\n    return this.get(path, parameters, true);\n  }\n\n}\n\n\nexport const theMovieDbApi = new TheMovieDbApi();\n\n\n\nclass AsyncResource {\n  status = \"pending\";\n  error = undefined;\n  data = undefined;\n  promise = null;\n\n  constructor(promise) {\n    this.promise = promise\n      .then((data) => {\n        this.status = \"success\";\n        this.data = data;\n      })\n      .catch((error) => {\n        this.status = \"error\";\n        this.error = error;\n      })\n  }\n\n  read() {\n    switch (this.status) {\n      case \"pending\":\n        throw this.promise;\n      case \"error\":\n        throw this.error;\n      default:\n        return this.data;\n    }\n  }\n}\n","import { ControllerLink } from \"helpers/urlApi\";\nimport { theMovieDbApi } from \"helpers/theMovieDbApi\";\n\n\nexport default function Home() {\n  const trending = theMovieDbApi.lazyGet(\"trending/movie/day\");\n  return (\n    <section>\n      <h2>Trending today</h2>\n      <ul>\n        {trending.results?.map(item =>\n          <li key={item.id}>\n            <ControllerLink path={`/movies/${item.id}`}>{item.title}</ControllerLink>\n          </li>\n        )}\n      </ul>\n    </section>\n  );\n};"],"names":["TheMovieDbApi","url","cache","configuration","images","base_url","secure_base_url","backdrop_sizes","logo_sizes","poster_sizes","profile_sizes","still_sizes","DESIRED_POSTER_SIZE","width","height","DESIRED_PORTRAIT_SIZE","parameters","this","loadConfiguration","list","closest","w","h","filter","item","startsWith","map","Number","parseInt","substring","sort","a","b","forEach","Math","abs","get","then","data","finally","buildImageUrls","imgUrl","posterPath","findBestTag","portraitPath","path","params","URLSearchParams","api_key","process","request","Promise","resolve","window","fetch","response","json","isLazy","buildRequestString","resource","createFetchPromise","AsyncResource","read","theMovieDbApi","promise","status","error","undefined","catch","Home","trending","results","ControllerLink","id","title"],"sourceRoot":""}