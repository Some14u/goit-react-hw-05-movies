{"version":3,"file":"static/js/components-SearchResults.4dc51237.chunk.js","mappings":"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","sources":["components/SearchResults.jsx","helpers/theMovieDbApi.js"],"sourcesContent":["import { theMovieDbApi } from \"helpers/theMovieDbApi\";\nimport { ControllerLink } from \"helpers/urlApi\";\nimport { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default function SearchResults({ query, resolvedCb }) {\n  const data = theMovieDbApi.lazyGet(\"search/movie\", { query });\n\n  useEffect(() => { // On this stage the request should be resolved because of lazyGet\n    resolvedCb(); // So we need to pass that back through resolvedCb\n  });\n\n  return (\n    <section>\n      {data.results.length === 0\n        ? <p>There are no movies that matched your query.</p>\n        : <ul>\n          {data.results.map(item => (\n            <li key={item.id}>\n              <ControllerLink path={\"/movies/\" + item.id}>{item.title}</ControllerLink>\n            </li>\n          ))}\n        </ul>\n      }\n    </section>\n  );\n}\n\nSearchResults.propTypes = {\n  query: PropTypes.string.isRequired,\n  resolvedCb: PropTypes.func.isRequired,\n}","class TheMovieDbApi {\n  url = \"https://api.themoviedb.org/3/\";\n  cache = {};\n  configuration = { // Default values just in case\n    images: {\n      base_url: \"http://image.tmdb.org/t/p/\",\n      secure_base_url: \"https://image.tmdb.org/t/p/\",\n      backdrop_sizes: [\n        \"w300\",\n        \"w780\",\n        \"w1280\",\n        \"original\"\n      ],\n      logo_sizes: [\n        \"w45\",\n        \"w92\",\n        \"w154\",\n        \"w185\",\n        \"w300\",\n        \"w500\",\n        \"original\"\n      ],\n      poster_sizes: [\n        \"w92\",\n        \"w154\",\n        \"w185\",\n        \"w342\",\n        \"w500\",\n        \"w780\",\n        \"original\"\n      ],\n      profile_sizes: [\n        \"w45\",\n        \"w185\",\n        \"h632\",\n        \"original\"\n      ],\n      still_sizes: [\n        \"w92\",\n        \"w185\",\n        \"w300\",\n        \"original\"\n      ],\n    },\n  };\n  imgUrl;\n  posterPath;\n  portraitPath;\n  DESIRED_POSTER_SIZE = { width: 240, height: 356 };\n  DESIRED_PORTRAIT_SIZE = { width: 100, height: 150 };\n  parameters = {};\n\n  constructor() {\n    this.loadConfiguration();\n  }\n\n  // Searches the closest possible tag name that comform with the given width and height\n  findBestTag(list, { width = 0, height = 0 }) {\n    if (width + height === 0) return \"original\";\n\n    let closest = { w: 0, h: 0 };\n\n    list.filter(item => item.startsWith(\"w\"))\n      .map(item => Number.parseInt(item.substring(1))).sort((a, b) => b - a)\n      .forEach(item => {\n        if (closest.w === 0 || (item > width && Math.abs(width - item) < Math.abs(width - closest.w))) closest.w = item;\n      });\n\n    list.filter(item => item.startsWith(\"h\")).sort((a, b) => b - a)\n      .map(item => Number.parseInt(item.substring(1)))\n      .forEach(item => {\n        if (closest.h === 0 || (item > height && Math.abs(height - item) < Math.abs(height - closest.h))) closest.h = item;\n      });\n    return Math.abs(height - closest.h) < Math.abs(width - closest.w) ? \"h\" + closest.h : \"w\" + closest.w;\n  }\n\n  loadConfiguration() {\n    this.get(\"configuration\")\n      .then(data => {\n        this.configuration = { ...this.configuration, ...data }\n      })\n      .finally(() => {\n        this.buildImageUrls();\n      });\n  }\n\n  buildImageUrls() {\n    this.imgUrl = this.configuration.images.secure_base_url;\n    this.posterPath = this.findBestTag(this.configuration.images.poster_sizes, this.DESIRED_POSTER_SIZE) + \"/\";\n    this.portraitPath = this.findBestTag(this.configuration.images.profile_sizes, this.DESIRED_PORTRAIT_SIZE) + \"/\";\n  }\n\n  buildRequestString(path, parameters = {}) {\n    const params = \"?\" + new URLSearchParams({ ...this.parameters, ...parameters, api_key: process.env.REACT_APP_SEARCH_KEY });\n    return this.url + path + params;\n  }\n\n  createFetchPromise(request) {\n    return new Promise(async (resolve) => {\n      const response = await window.fetch(request);\n      const data = await response.json();\n      resolve(data);\n    });\n  }\n\n\n  get(path, parameters = {}, isLazy) {\n    const request = this.buildRequestString(path, parameters);\n    if (!this.cache[request]) {\n      const resource = this.createFetchPromise(request);\n      this.cache[request] = isLazy ? new AsyncResource(resource) : resource;\n    }\n    return isLazy ? this.cache[request].read() : this.cache[request];\n  }\n\n  lazyGet(path, parameters) {\n    return this.get(path, parameters, true);\n  }\n\n}\n\n\nexport const theMovieDbApi = new TheMovieDbApi();\n\n\n\nclass AsyncResource {\n  status = \"pending\";\n  error = undefined;\n  data = undefined;\n  promise = null;\n\n  constructor(promise) {\n    this.promise = promise\n      .then((data) => {\n        this.status = \"success\";\n        this.data = data;\n      })\n      .catch((error) => {\n        this.status = \"error\";\n        this.error = error;\n      })\n  }\n\n  read() {\n    switch (this.status) {\n      case \"pending\":\n        throw this.promise;\n      case \"error\":\n        throw this.error;\n      default:\n        return this.data;\n    }\n  }\n}\n"],"names":["SearchResults","query","resolvedCb","data","theMovieDbApi","useEffect","results","length","map","item","ControllerLink","path","id","title","TheMovieDbApi","url","cache","configuration","images","base_url","secure_base_url","backdrop_sizes","logo_sizes","poster_sizes","profile_sizes","still_sizes","DESIRED_POSTER_SIZE","width","height","DESIRED_PORTRAIT_SIZE","parameters","this","loadConfiguration","list","closest","w","h","filter","startsWith","Number","parseInt","substring","sort","a","b","forEach","Math","abs","get","then","finally","buildImageUrls","imgUrl","posterPath","findBestTag","portraitPath","params","URLSearchParams","api_key","process","request","Promise","resolve","window","fetch","response","json","isLazy","buildRequestString","resource","createFetchPromise","AsyncResource","read","promise","status","error","undefined","catch"],"sourceRoot":""}