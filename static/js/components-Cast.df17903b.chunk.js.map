{"version":3,"file":"static/js/components-Cast.df17903b.chunk.js","mappings":"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","sources":["components/Cast.jsx","components/Cast.styled.js","helpers/theMovieDbApi.js"],"sourcesContent":["import { theMovieDbApi } from \"helpers/theMovieDbApi\";\nimport { Portrait, Wrapper, ItemWrapper, Details, Character, Name } from \"./Cast.styled\";\nimport PropTypes from \"prop-types\";\n\n\nimport male from \"../resources/male.gif\";\nimport female from \"../resources/female.gif\";\n\n\nexport default function Cast(props) {\n  const data = theMovieDbApi.lazyGet(`movie/${props.urlParams.movieId}/credits`);\n\n  if (!data.cast || data.cast.length === 0) return <p>We don't have any information about cast for this movie.</p>;\n  return (\n    <Wrapper>\n      {data.cast.map(item => (\n        <li key={item.cast_id || item.id}>\n          <ItemWrapper>\n            <Portrait\n              src={item.profile_path\n                ? theMovieDbApi.imgUrl + theMovieDbApi.portraitPath + item.profile_path\n                : item.gender === 1 ? female : male\n              }\n              alt={`${item.name}'s portrait`} />\n            <Details>\n              <Name>{item.name}</Name>\n              <Character>Character:</Character>\n              <div>{item.character}</div>\n            </Details>\n          </ItemWrapper>\n        </li>\n      ))}\n    </Wrapper>\n  );\n};\n\nCast.propTypes = {\n  urlParams: PropTypes.shape({\n    movieId: PropTypes.string.isRequired,\n  }).isRequired,\n}","import styled from \"styled-components\";\n\nexport const ItemWrapper = styled.article`\n  display: flex;\n`;\n\nexport const Details = styled.div`\n  padding-left: 1em;\n`;\n\nexport const Portrait = styled.img`\n  width: 100px;\n  border-radius: 3px;\n  height: min-content;\n`;\n\nexport const Wrapper = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, 250px);\n  gap: 0.5rem;\n  list-style: none;\n  padding-left: 0;\n  & li {\n    background-color: white;\n    padding: 1em;\n    border-radius: 5px;\n    box-shadow: 0 5px 7px -5px #0005;\n  }\n`;\n\nexport const Character = styled.div`\n  font-size: 0.7em;\n  font-style: italic;\n  opacity: 0.7;\n`\n\nexport const Name = styled.p`\n  margin-top: 0;\n`","class TheMovieDbApi {\n  url = \"https://api.themoviedb.org/3/\";\n  cache = {};\n  configuration = { // Default values just in case\n    images: {\n      base_url: \"http://image.tmdb.org/t/p/\",\n      secure_base_url: \"https://image.tmdb.org/t/p/\",\n      backdrop_sizes: [\n        \"w300\",\n        \"w780\",\n        \"w1280\",\n        \"original\"\n      ],\n      logo_sizes: [\n        \"w45\",\n        \"w92\",\n        \"w154\",\n        \"w185\",\n        \"w300\",\n        \"w500\",\n        \"original\"\n      ],\n      poster_sizes: [\n        \"w92\",\n        \"w154\",\n        \"w185\",\n        \"w342\",\n        \"w500\",\n        \"w780\",\n        \"original\"\n      ],\n      profile_sizes: [\n        \"w45\",\n        \"w185\",\n        \"h632\",\n        \"original\"\n      ],\n      still_sizes: [\n        \"w92\",\n        \"w185\",\n        \"w300\",\n        \"original\"\n      ],\n    },\n  };\n  imgUrl;\n  posterPath;\n  portraitPath;\n  DESIRED_POSTER_SIZE = { width: 240, height: 356 };\n  DESIRED_PORTRAIT_SIZE = { width: 100, height: 150 };\n  parameters = {};\n\n  constructor() {\n    this.loadConfiguration();\n  }\n\n  // Searches the closest possible tag name that comform with the given width and height\n  findBestTag(list, { width = 0, height = 0 }) {\n    if (width + height === 0) return \"original\";\n\n    let closest = { w: 0, h: 0 };\n\n    list.filter(item => item.startsWith(\"w\"))\n      .map(item => Number.parseInt(item.substring(1))).sort((a, b) => b - a)\n      .forEach(item => {\n        if (closest.w === 0 || (item > width && Math.abs(width - item) < Math.abs(width - closest.w))) closest.w = item;\n      });\n\n    list.filter(item => item.startsWith(\"h\")).sort((a, b) => b - a)\n      .map(item => Number.parseInt(item.substring(1)))\n      .forEach(item => {\n        if (closest.h === 0 || (item > height && Math.abs(height - item) < Math.abs(height - closest.h))) closest.h = item;\n      });\n    return Math.abs(height - closest.h) < Math.abs(width - closest.w) ? \"h\" + closest.h : \"w\" + closest.w;\n  }\n\n  loadConfiguration() {\n    this.get(\"configuration\")\n      .then(data => {\n        this.configuration = { ...this.configuration, ...data }\n      })\n      .finally(() => {\n        this.buildImageUrls();\n      });\n  }\n\n  buildImageUrls() {\n    this.imgUrl = this.configuration.images.secure_base_url;\n    this.posterPath = this.findBestTag(this.configuration.images.poster_sizes, this.DESIRED_POSTER_SIZE) + \"/\";\n    this.portraitPath = this.findBestTag(this.configuration.images.profile_sizes, this.DESIRED_PORTRAIT_SIZE) + \"/\";\n  }\n\n  buildRequestString(path, parameters = {}) {\n    const params = \"?\" + new URLSearchParams({ ...this.parameters, ...parameters, api_key: process.env.REACT_APP_SEARCH_KEY });\n    return this.url + path + params;\n  }\n\n  createFetchPromise(request) {\n    return new Promise(async (resolve) => {\n      const response = await window.fetch(request);\n      const data = await response.json();\n      resolve(data);\n    });\n  }\n\n\n  get(path, parameters = {}, isLazy) {\n    const request = this.buildRequestString(path, parameters);\n    if (!this.cache[request]) {\n      const resource = this.createFetchPromise(request);\n      this.cache[request] = isLazy ? new AsyncResource(resource) : resource;\n    }\n    return isLazy ? this.cache[request].read() : this.cache[request];\n  }\n\n  lazyGet(path, parameters) {\n    return this.get(path, parameters, true);\n  }\n\n}\n\n\nexport const theMovieDbApi = new TheMovieDbApi();\n\n\n\nclass AsyncResource {\n  status = \"pending\";\n  error = undefined;\n  data = undefined;\n  promise = null;\n\n  constructor(promise) {\n    this.promise = promise\n      .then((data) => {\n        this.status = \"success\";\n        this.data = data;\n      })\n      .catch((error) => {\n        this.status = \"error\";\n        this.error = error;\n      })\n  }\n\n  read() {\n    switch (this.status) {\n      case \"pending\":\n        throw this.promise;\n      case \"error\":\n        throw this.error;\n      default:\n        return this.data;\n    }\n  }\n}\n"],"names":["Cast","props","data","theMovieDbApi","urlParams","movieId","cast","length","Wrapper","map","item","ItemWrapper","Portrait","src","profile_path","gender","female","male","alt","name","Details","Name","Character","character","cast_id","id","styled","TheMovieDbApi","url","cache","configuration","images","base_url","secure_base_url","backdrop_sizes","logo_sizes","poster_sizes","profile_sizes","still_sizes","DESIRED_POSTER_SIZE","width","height","DESIRED_PORTRAIT_SIZE","parameters","this","loadConfiguration","list","closest","w","h","filter","startsWith","Number","parseInt","substring","sort","a","b","forEach","Math","abs","get","then","finally","buildImageUrls","imgUrl","posterPath","findBestTag","portraitPath","path","params","URLSearchParams","api_key","process","request","Promise","resolve","window","fetch","response","json","isLazy","buildRequestString","resource","createFetchPromise","AsyncResource","read","promise","status","error","undefined","catch"],"sourceRoot":""}