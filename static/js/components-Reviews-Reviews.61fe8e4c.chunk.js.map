{"version":3,"file":"static/js/components-Reviews-Reviews.61fe8e4c.chunk.js","mappings":"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","sources":["components/Reviews/Reviews.jsx","components/Reviews/Reviews.styled.js","helpers/theMovieDbApi.js"],"sourcesContent":["import { Fragment } from \"react\";\nimport { theMovieDbApi } from \"helpers/theMovieDbApi\";\nimport { Wrapper, Text, Author, Timestamp } from \"./Reviews.styled\";\nimport PropTypes from \"prop-types\";\n\nexport default function Reviews(props) {\n  const data = theMovieDbApi.lazyGet(`movie/${props.urlParams.movieId}/reviews`);\n\n  if (!data.results || data.results.length === 0) return <p>We don't have any reviews for this movie.</p>;\n  return (\n    <Wrapper>\n      {data.results.map(item => (\n        <li key={item.id}>\n          <Author>{item.author}</Author>\n          <Text>{linkRenderer(item.content)}</Text>\n          {(item.updated_at || item.created_at) && <Timestamp>{formatDate(item.updated_at || item.created_at)}</Timestamp>}\n        </li>\n      ))}\n    </Wrapper>\n  );\n};\n\n\nReviews.propTypes = {\n  urlParams: PropTypes.shape({\n    movieId: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\n\n// Reassembles content to allow working urls and bold text\nconst linkRenderer = (content) => {\n  const linkExp = /^https?:\\/\\/[a-z0-9_%#./-]*$/i;\n  const boldExp = /^\\*\\*[^*]+\\*\\*$/i;\n  const italicExp = /^_[^_]+_$/i;\n\n  function parse(part, key) {\n    let res = part;\n    if (part.match(linkExp)) {\n      res = <a\n        href={part}\n        onFocus={(e) => { e.stopPropagation() }}\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >{part}</a>;\n    } else if (part.match(boldExp)) {\n      res = <b>{ part.substring(2, part.length - 2) }</b>;\n    } else if (part.match(italicExp)) {\n    res = <i>{ part.substring(1, part.length - 1) }</i>;\n  }\n  return <Fragment key={key}>{res}</Fragment>;\n  }\n  return content.split(/(https?:\\/\\/[a-z0-9_%#./-]*|\\*\\*[^*]+\\*\\*|_[^_]+_)/gi).map(parse);\n}\n\nfunction formatDate(date) {\n  date = new Date(date);\n  if (!date) return;\n  return date.toLocaleString('en-us', { day: \"numeric\", month: \"long\", year: \"numeric\" });\n}","import styled from \"styled-components\";\n\n\nexport const Wrapper = styled.ul`\n  width: 760px;\n\n  list-style: none;\n  padding-left: 0;\n\n  @media (min-width: 1580px) {\n    column-count: 2;\n    width: calc(760px * 2 + 10px);\n    column-gap: 10px;\n  }\n\n  & li {\n    background-color: white;\n    padding: 1em;\n    border-radius: 5px;\n    box-shadow: 0 5px 7px -5px #0005;\n    margin-bottom: 10px;\n    break-inside: avoid-column;\n    overflow: hidden;\n  }\n`;\n\nexport const Author = styled.h3`\n  margin-top: 0;\n`;\n\nexport const Text = styled.div`\n  column-count: 2;\n  column-rule: 1px solid lightblue;\n  white-space: break-spaces;\n`;\n\nexport const Timestamp = styled.div`\n  text-align: right;\n  font-style: italic;\n  font-size: 0.8em;\n\n  opacity: 0.5;\n\n  margin-top: 10px;\n`\n\n","class TheMovieDbApi {\n  url = \"https://api.themoviedb.org/3/\";\n  cache = {};\n  configuration = { // Default values just in case\n    images: {\n      base_url: \"http://image.tmdb.org/t/p/\",\n      secure_base_url: \"https://image.tmdb.org/t/p/\",\n      backdrop_sizes: [\n        \"w300\",\n        \"w780\",\n        \"w1280\",\n        \"original\"\n      ],\n      logo_sizes: [\n        \"w45\",\n        \"w92\",\n        \"w154\",\n        \"w185\",\n        \"w300\",\n        \"w500\",\n        \"original\"\n      ],\n      poster_sizes: [\n        \"w92\",\n        \"w154\",\n        \"w185\",\n        \"w342\",\n        \"w500\",\n        \"w780\",\n        \"original\"\n      ],\n      profile_sizes: [\n        \"w45\",\n        \"w185\",\n        \"h632\",\n        \"original\"\n      ],\n      still_sizes: [\n        \"w92\",\n        \"w185\",\n        \"w300\",\n        \"original\"\n      ],\n    },\n  };\n  imgUrl;\n  posterPath;\n  portraitPath;\n  DESIRED_POSTER_SIZE = { width: 240, height: 356 };\n  DESIRED_PORTRAIT_SIZE = { width: 100, height: 150 };\n  parameters = {};\n\n  constructor() {\n    this.loadConfiguration();\n  }\n\n  // Searches the closest possible tag name that comform with the given width and height\n  findBestTag(list, { width = 0, height = 0 }) {\n    if (width + height === 0) return \"original\";\n\n    let closest = { w: 0, h: 0 };\n\n    list.filter(item => item.startsWith(\"w\"))\n      .map(item => Number.parseInt(item.substring(1))).sort((a, b) => b - a)\n      .forEach(item => {\n        if (closest.w === 0 || (item > width && Math.abs(width - item) < Math.abs(width - closest.w))) closest.w = item;\n      });\n\n    list.filter(item => item.startsWith(\"h\")).sort((a, b) => b - a)\n      .map(item => Number.parseInt(item.substring(1)))\n      .forEach(item => {\n        if (closest.h === 0 || (item > height && Math.abs(height - item) < Math.abs(height - closest.h))) closest.h = item;\n      });\n    return Math.abs(height - closest.h) < Math.abs(width - closest.w) ? \"h\" + closest.h : \"w\" + closest.w;\n  }\n\n  loadConfiguration() {\n    this.get(\"configuration\")\n      .then(data => {\n        this.configuration = { ...this.configuration, ...data }\n      })\n      .finally(() => {\n        this.buildImageUrls();\n      });\n  }\n\n  buildImageUrls() {\n    this.imgUrl = this.configuration.images.secure_base_url;\n    this.posterPath = this.findBestTag(this.configuration.images.poster_sizes, this.DESIRED_POSTER_SIZE) + \"/\";\n    this.portraitPath = this.findBestTag(this.configuration.images.profile_sizes, this.DESIRED_PORTRAIT_SIZE) + \"/\";\n  }\n\n  buildRequestString(path, parameters = {}) {\n    const params = \"?\" + new URLSearchParams({ ...this.parameters, ...parameters, api_key: process.env.REACT_APP_SEARCH_KEY });\n    return this.url + path + params;\n  }\n\n  createFetchPromise(request) {\n    return new Promise(async (resolve) => {\n      const response = await window.fetch(request);\n      const data = await response.json();\n      resolve(data);\n    });\n  }\n\n\n  get(path, parameters = {}, isLazy) {\n    const request = this.buildRequestString(path, parameters);\n    if (!this.cache[request]) {\n      const resource = this.createFetchPromise(request);\n      this.cache[request] = isLazy ? new AsyncResource(resource) : resource;\n    }\n    return isLazy ? this.cache[request].read() : this.cache[request];\n  }\n\n  lazyGet(path, parameters) {\n    return this.get(path, parameters, true);\n  }\n\n}\n\n\nexport const theMovieDbApi = new TheMovieDbApi();\n\n\n\nclass AsyncResource {\n  status = \"pending\";\n  error = undefined;\n  data = undefined;\n  promise = null;\n\n  constructor(promise) {\n    this.promise = promise\n      .then((data) => {\n        this.status = \"success\";\n        this.data = data;\n      })\n      .catch((error) => {\n        this.status = \"error\";\n        this.error = error;\n      })\n  }\n\n  read() {\n    switch (this.status) {\n      case \"pending\":\n        throw this.promise;\n      case \"error\":\n        throw this.error;\n      default:\n        return this.data;\n    }\n  }\n}\n"],"names":["Reviews","props","data","theMovieDbApi","urlParams","movieId","results","length","Wrapper","map","item","Author","author","Text","linkRenderer","content","updated_at","created_at","Timestamp","formatDate","id","linkExp","boldExp","italicExp","split","part","key","res","match","href","onFocus","e","stopPropagation","target","rel","substring","Fragment","date","Date","toLocaleString","day","month","year","styled","TheMovieDbApi","url","cache","configuration","images","base_url","secure_base_url","backdrop_sizes","logo_sizes","poster_sizes","profile_sizes","still_sizes","DESIRED_POSTER_SIZE","width","height","DESIRED_PORTRAIT_SIZE","parameters","this","loadConfiguration","list","closest","w","h","filter","startsWith","Number","parseInt","sort","a","b","forEach","Math","abs","get","then","finally","buildImageUrls","imgUrl","posterPath","findBestTag","portraitPath","path","params","URLSearchParams","api_key","process","request","Promise","resolve","window","fetch","response","json","isLazy","buildRequestString","resource","createFetchPromise","AsyncResource","read","promise","status","error","undefined","catch"],"sourceRoot":""}